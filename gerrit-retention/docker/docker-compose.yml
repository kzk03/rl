# Gerrit開発者定着予測システム - 本番対応Docker Compose設定

version: "3.8"

services:
  # メインアプリケーション
  gerrit-retention-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: gerrit-retention-app
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - GERRIT_URL=${GERRIT_URL}
      - GERRIT_USERNAME=${GERRIT_USERNAME}
      - GERRIT_PASSWORD=${GERRIT_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ML_DEVICE=${ML_DEVICE:-auto}
      - ML_RANDOM_SEED=${ML_RANDOM_SEED:-42}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gerrit_password}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - app_data:/app/data
      - app_models:/app/models
      - app_logs:/app/logs
      - app_outputs:/app/outputs
      - ../configs:/app/configs:ro
    ports:
      - "${APP_PORT:-8080}:8080"
      - "${METRICS_PORT:-8081}:8081"
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: ${APP_MEMORY_LIMIT:-4G}
          cpus: "${APP_CPU_LIMIT:-2.0}"
        reservations:
          memory: ${APP_MEMORY_RESERVATION:-2G}
          cpus: "${APP_CPU_RESERVATION:-1.0}"
    healthcheck:
      test: ["/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ワーカーサービス（並列処理用）
  gerrit-retention-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - WORKER_TYPE=background
      - GERRIT_URL=${GERRIT_URL}
      - GERRIT_USERNAME=${GERRIT_USERNAME}
      - GERRIT_PASSWORD=${GERRIT_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ML_DEVICE=${ML_DEVICE:-auto}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gerrit_password}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - app_data:/app/data
      - app_models:/app/models
      - app_logs:/app/logs
      - app_outputs:/app/outputs
      - ../configs:/app/configs:ro
    command: ["python", "scripts/worker.py"]
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - gerrit-retention-network
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: ${WORKER_MEMORY_LIMIT:-2G}
          cpus: "${WORKER_CPU_LIMIT:-1.0}"
        reservations:
          memory: ${WORKER_MEMORY_RESERVATION:-1G}
          cpus: "${WORKER_CPU_RESERVATION:-0.5}"

  # Redis（キャッシュ・メッセージキュー）
  redis:
    image: redis:7-alpine
    container_name: gerrit-retention-redis
    command: redis-server --appendonly yes --maxmemory ${REDIS_MEMORY:-512mb} --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-1G}
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL（データベース）
  postgres:
    image: postgres:15-alpine
    container_name: gerrit-retention-postgres
    environment:
      - POSTGRES_DB=gerrit_retention
      - POSTGRES_USER=gerrit_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gerrit_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-2G}
          cpus: "1.0"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gerrit_user -d gerrit_retention"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow（実験追跡）
  mlflow:
    image: python:3.11-slim
    container_name: gerrit-retention-mlflow
    command: >
      bash -c "
        pip install --no-cache-dir mlflow psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://gerrit_user:${POSTGRES_PASSWORD:-gerrit_password}@postgres:5432/gerrit_retention
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
          --workers 2
      "
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus（メトリクス収集）
  prometheus:
    image: prom/prometheus:latest
    container_name: gerrit-retention-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Grafana（可視化ダッシュボード）
  grafana:
    image: grafana/grafana:latest
    container_name: gerrit-retention-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  # Nginx（リバースプロキシ・ロードバランサー）
  nginx:
    image: nginx:alpine
    container_name: gerrit-retention-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - gerrit-retention-app
    restart: unless-stopped
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

volumes:
  app_data:
    driver: local
  app_models:
    driver: local
  app_logs:
    driver: local
  app_outputs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mlflow_artifacts:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gerrit-retention-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
