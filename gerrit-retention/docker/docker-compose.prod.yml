# 本番環境用Docker Compose設定

version: "3.8"

services:
  # 本番用アプリケーション（複数インスタンス）
  gerrit-retention-app:
    extends:
      file: docker-compose.yml
      service: gerrit-retention-app
    environment:
      - ENVIRONMENT=production
      - LOG_FORMAT=json
      - ML_DEVICE=auto
    deploy:
      replicas: ${APP_REPLICAS:-3}
      resources:
        limits:
          memory: 8G
          cpus: "4.0"
        reservations:
          memory: 4G
          cpus: "2.0"
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # 本番用ワーカー（スケーラブル）
  gerrit-retention-worker:
    extends:
      file: docker-compose.yml
      service: gerrit-retention-worker
    deploy:
      replicas: ${WORKER_REPLICAS:-5}
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 60s

  # 本番用Redis（高可用性設定）
  redis:
    extends:
      file: docker-compose.yml
      service: redis
    command: >
      redis-server 
        --appendonly yes 
        --maxmemory 2gb 
        --maxmemory-policy allkeys-lru
        --save 900 1
        --save 300 10
        --save 60 10000
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # 本番用PostgreSQL（パフォーマンス最適化）
  postgres:
    extends:
      file: docker-compose.yml
      service: postgres
    environment:
      - POSTGRES_DB=gerrit_retention
      - POSTGRES_USER=gerrit_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements
        -c max_connections=200
        -c shared_buffers=1GB
        -c effective_cache_size=3GB
        -c maintenance_work_mem=256MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"

  # ログ集約（ELK Stack）
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gerrit-retention-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: gerrit-retention-logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: gerrit-retention-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - gerrit-retention-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # セキュリティスキャナー
  trivy:
    image: aquasec/trivy:latest
    container_name: gerrit-retention-trivy
    command: >
      sh -c "
        trivy image --exit-code 0 --severity HIGH,CRITICAL gerrit-retention-app:latest &&
        trivy fs --exit-code 0 --severity HIGH,CRITICAL /app
      "
    volumes:
      - ../:/app:ro
      - trivy_cache:/root/.cache/trivy
    networks:
      - gerrit-retention-network

volumes:
  elasticsearch_data:
    driver: local
  trivy_cache:
    driver: local

# 本番環境用の追加設定
configs:
  nginx_config:
    file: ./nginx.prod.conf
  prometheus_config:
    file: ./prometheus.prod.yml

secrets:
  postgres_password:
    external: true
  gerrit_password:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true
